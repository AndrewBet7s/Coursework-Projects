%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Naeem Tai
% CSCI 362
% 12/04/2013
% probabilistic_kmeans.m
%       This program runs the kmeans on an image hundred times to determine
%       the probility of each pixel belonging to a cluster with specific
%       intensity range.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

close all % closes all of the figures
clear all % deletes all stored variables in workspace
clc % clear command window

% initialize the image and number of clusters
filename = 'soccerball.bmp'; % input image
k = 3; % number of clusters

k = k; % k clusters
image = imread(filename); % read an image
gray = rgb2gray(image); % convert image to grayscale
gray = im2double(gray);
dynamic = gray; % create a copy of image that will be modified after final cluster assignments

% declare matrix of n by m with all 0s
[rows, cols] = size(gray);
prev = zeros(rows, cols); % to store previous cluster assignment
cur = ones(rows, cols); % to store current cluster assignment

% initialize a matrix for each cluster with all 0s
for i = 1:k
    row = randi(rows, 1);
    col = randi(cols, 1);
    clusterprobs(:, :, i) = zeros(rows, cols);
end

% run k means 100 times
for x=1:100
   close all; % close figures generated by kmeans
   
   % restore the dynamic image to be the original grayscale image
    dynamic = gray;

    % chooce k random centroids
    for i = 1:k
        row = randi(rows, 1);
        col = randi(cols, 1);
        centroids(i) = dynamic(row, col);
    end
    
    % put cluster values in ascending order
    centroids = sort(centroids);
    
    % recalculate kmeans
    keepgoing = true;
    step = 0;
    while (keepgoing)
        prev = cur; % copy current assignment to previous

        % recalculate current cluster assignment
        for n=1:rows
            for m=1:cols
                % calculate distance from each centroid and find minimum distance
                mindist = 256;
                clust = 1;
                dist = 0;
                for i=1:k
                    dist = abs(centroids(i) - dynamic(n, m));
                    if (dist < mindist)
                        mindist = dist;
                        % assign a cluster number to a pixels's position
                        cur(n, m) = i;
                    end
                end
            end
        end

        % calculate new centroids
        for i=1:k
            temp = dynamic(find(cur == i));
            centroids(i) = mean(temp);
        end

        % check if the current cluster assignment is same as the previous
        if (isequal(prev, cur))
           keepgoing = false;
        else
            keepgoing = true;
        end

        step = step + 1;
        disp(['step: ' num2str(step)]);
        disp(isequal(prev, cur));
        disp(keepgoing);

    end  
    
    % assign cluster values to pixels
    for n=1:rows
        for m=1:cols
          dynamic(n, m) = centroids(cur(n, m)); 
        end
    end
    
    % put cluster values in ascending order
    centroids = sort(centroids);
   
    % increase counter in corresponding cluster probility matrix
    for x=1:k
        tempChange = clusterprobs(:, :, x);
        for n=1:rows
            for m=1:cols
               if (cur(n, m) == x)
                  tempChange(n, m) = tempChange(n, m) + 1;
               end
            end
        end
        clusterprobs(:, :, x) = tempChange;
    end
    
end

% disp cluster probability images
for x=1:k
    clusterprobs(:, :, x) = im2double(clusterprobs(:, :, x));
    figure, imshow(clusterprobs(:, :, x)); 
end